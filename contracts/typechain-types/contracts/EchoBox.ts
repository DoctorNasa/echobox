/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EchoBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimGift"
      | "createGift"
      | "createTokenGift"
      | "getGiftDetails"
      | "getGiftsByENS"
      | "getReceivedGifts"
      | "getSentGifts"
      | "getTotalGifts"
      | "gifts"
      | "isTokenSupported"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GiftClaimed" | "GiftCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimGift",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGift",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenGift",
    values: [
      AddressLike,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGiftDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGiftsByENS",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedGifts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSentGifts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalGifts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gifts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isTokenSupported",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimGift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGift", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTokenGift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGiftDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGiftsByENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedGifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentGifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalGifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gifts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSupported",
    data: BytesLike
  ): Result;
}

export namespace GiftClaimedEvent {
  export type InputTuple = [
    id: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, recipient: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GiftCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    recipientENS: string,
    amount: BigNumberish,
    unlockTimestamp: BigNumberish,
    tokenType: BigNumberish,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    sender: string,
    recipient: string,
    recipientENS: string,
    amount: bigint,
    unlockTimestamp: bigint,
    tokenType: bigint,
    tokenAddress: string
  ];
  export interface OutputObject {
    id: bigint;
    sender: string;
    recipient: string;
    recipientENS: string;
    amount: bigint;
    unlockTimestamp: bigint;
    tokenType: bigint;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EchoBox extends BaseContract {
  connect(runner?: ContractRunner | null): EchoBox;
  waitForDeployment(): Promise<this>;

  interface: EchoBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimGift: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  createGift: TypedContractMethod<
    [
      _recipient: AddressLike,
      _recipientENS: string,
      _unlockTimestamp: BigNumberish,
      _message: string
    ],
    [void],
    "payable"
  >;

  createTokenGift: TypedContractMethod<
    [
      _recipient: AddressLike,
      _recipientENS: string,
      _tokenAddress: AddressLike,
      _amount: BigNumberish,
      _unlockTimestamp: BigNumberish,
      _message: string
    ],
    [void],
    "nonpayable"
  >;

  getGiftDetails: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        sender: string;
        recipient: string;
        recipientENS: string;
        amount: bigint;
        unlockTimestamp: bigint;
        message: string;
        claimed: boolean;
        tokenType: bigint;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  getGiftsByENS: TypedContractMethod<[_ensName: string], [bigint[]], "view">;

  getReceivedGifts: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getSentGifts: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  getTotalGifts: TypedContractMethod<[], [bigint], "view">;

  gifts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        id: bigint;
        sender: string;
        recipient: string;
        recipientENS: string;
        amount: bigint;
        unlockTimestamp: bigint;
        message: string;
        claimed: boolean;
        tokenType: bigint;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  isTokenSupported: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimGift"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createGift"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _recipientENS: string,
      _unlockTimestamp: BigNumberish,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTokenGift"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _recipientENS: string,
      _tokenAddress: AddressLike,
      _amount: BigNumberish,
      _unlockTimestamp: BigNumberish,
      _message: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGiftDetails"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        sender: string;
        recipient: string;
        recipientENS: string;
        amount: bigint;
        unlockTimestamp: bigint;
        message: string;
        claimed: boolean;
        tokenType: bigint;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGiftsByENS"
  ): TypedContractMethod<[_ensName: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getReceivedGifts"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSentGifts"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalGifts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gifts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        id: bigint;
        sender: string;
        recipient: string;
        recipientENS: string;
        amount: bigint;
        unlockTimestamp: bigint;
        message: string;
        claimed: boolean;
        tokenType: bigint;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenSupported"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [boolean], "view">;

  getEvent(
    key: "GiftClaimed"
  ): TypedContractEvent<
    GiftClaimedEvent.InputTuple,
    GiftClaimedEvent.OutputTuple,
    GiftClaimedEvent.OutputObject
  >;
  getEvent(
    key: "GiftCreated"
  ): TypedContractEvent<
    GiftCreatedEvent.InputTuple,
    GiftCreatedEvent.OutputTuple,
    GiftCreatedEvent.OutputObject
  >;

  filters: {
    "GiftClaimed(uint256,address,uint256)": TypedContractEvent<
      GiftClaimedEvent.InputTuple,
      GiftClaimedEvent.OutputTuple,
      GiftClaimedEvent.OutputObject
    >;
    GiftClaimed: TypedContractEvent<
      GiftClaimedEvent.InputTuple,
      GiftClaimedEvent.OutputTuple,
      GiftClaimedEvent.OutputObject
    >;

    "GiftCreated(uint256,address,address,string,uint256,uint256,uint8,address)": TypedContractEvent<
      GiftCreatedEvent.InputTuple,
      GiftCreatedEvent.OutputTuple,
      GiftCreatedEvent.OutputObject
    >;
    GiftCreated: TypedContractEvent<
      GiftCreatedEvent.InputTuple,
      GiftCreatedEvent.OutputTuple,
      GiftCreatedEvent.OutputObject
    >;
  };
}
